Базовая концепция юнитов:
Юнит - это некоторая конструкция, преобразующая входной вектор в выходной.

Базовые юниты - это конструкции типа резервуара, ридаута и подобные. Они преобразуют
входной вектор непосредственно.

НО этим юниты не ограничиваются.

Коллекции юнитов  - это вилки и конвейер. Они преобразуют входной сигнал 
вызывая другие юниты. И они также должны являтся юнитами.

Таким образом, базовые юниты - это объекты, работающие на уровне векторов.

Для тестирования пердиктов нужен отдельный модуль, который уже не будет юнитом.

На счет юнитов, которым требуется более одного входа (например резервуар с возвратом или
ридаут от двух параллельных юнитов):

Будем подавать на вход не отдельные вектора, а списки векторов {inp1, inp2, ..., inpN}
Выходом попрежнему будет только один вектор. Веса будут хранится как списки матриц {w1, .., wN}.
Взависимости от конкретного юнита (w*inp)-i-е буду либо суммироваться, либо конкатинироваться в 
длинный вектор.

Таким образом на пока отложим коллекции юнитов и тестер, а займемся созданием базовых юнитов.
Для начала: резервуар, ридж_ридаут и симл_юнит.

Базовый юнит должен иметь:
!)метод для перобразования входа(списка векторов) в выход(один вектор) (назовем его forward(), надоело писать operator)
!)метод определяющий необходимое количество весов (init() метод)
!)метод для обучения:
!!)поскольку большенство базовых юнитов, в лучшем случае, обучаются без учителя,
    то для унификации метода будем также подавать список данных(либо {inp} либо {inp, out}).
    так же стоит рассмотреть возможность создания отдельных классов, ответственных за 
    обучение юнитов.

Мы создали класс алгоритмов, позволяющий подавать их в качестве аргументов юнитам в метод обучения.
Это избавляет нас от написания отдельных классов юнитов для ридж, симпл, сом и возможно других.
Однако нам все еще нужно определить резервуар, так как он отличается наличием доп матрицы весов,
внутренним состоянием и рядом других параметров. Также многослойные сети нужно создавать отдельно,
так как они сильно отличаются от базовых юнитов (т.е. их вообще не имеет смысла наследовать от базового юнита,
нужно будет создать новый класс для из описания).